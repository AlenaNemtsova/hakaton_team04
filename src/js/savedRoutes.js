document.addEventListener('DOMContentLoaded', () => {
	const savedRoutesList = document.getElementById('saved-routes-list');

	const encoded = new URLSearchParams(window.location.search).get('data');

	// üìå –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –º–∞—Ä—à—Ä—É—Ç –ø–æ —Å—Å—ã–ª–∫–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
	if (encoded) {
		try {
			const json = decodeURIComponent(atob(encoded));
			const route = JSON.parse(json);
			renderRoute(route, savedRoutesList, undefined); // –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞ ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–£–¥–∞–ª–∏—Ç—å"
			return;
		} catch (e) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏:', e);
			savedRoutesList.innerText = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞.';
			return;
		}
	}

	// üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ localStorage
	const raw = localStorage.getItem('savedRoutes');
	let routes = [];
	if (raw) {
		try {
			routes = JSON.parse(raw);
		} catch (e) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤:', e);
		}
	}

	if (!routes.length) {
		savedRoutesList.innerText = '–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.';
		return;
	}

	routes.forEach((route, index) => {
		renderRoute(route, savedRoutesList, index);
	});
});

function renderRoute(route, container, index = 0) {
	const box = document.createElement('div');

	const title = document.createElement('h2');
	title.textContent = `–ú–∞—Ä—à—Ä—É—Ç ${index + 1 || 1}: ${route.cityName} ‚Äî ${route.theme
		}`;
	box.appendChild(title);

	route.days.forEach((day, i) => {
		const dayBlock = document.createElement('div');

		const dayTitle = document.createElement('h3');
		dayTitle.textContent = `–î–µ–Ω—å ${i + 1}: ${day.title}`;
		dayBlock.appendChild(dayTitle);

		const placeList = document.createElement('ul');
		day.places.forEach((place) => {
			const li = document.createElement('li');
			li.innerHTML = `
				<strong>${place.time}</strong> ‚Äî 
				${place.name} (${getPlaceTypeName(place.type)})<br>
				<small>${place.address}</small>
			`;
			placeList.appendChild(li);
		});

		dayBlock.appendChild(placeList);
		box.appendChild(dayBlock);
	});

	// üîµ –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å PDF"
	const pdfButton = document.createElement('button');
	pdfButton.textContent = '–°–∫–∞—á–∞—Ç—å PDF';
	pdfButton.addEventListener('click', () => {
		const newWindow = window.open('', '_blank');
		const style = `
      <style>
        body { font-family: Arial, sans-serif; padding: 2rem; }
        h2 { color: #1e40af; }
        h3 { color: #2563eb; margin-top: 1rem; }
        ul { list-style: none; padding: 0; }
        li { margin-bottom: 0.5rem; }
      </style>
    `;

		const html = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8" />
          ${style}
        </head>
        <body>
          <h2>–ú–∞—Ä—à—Ä—É—Ç ${index + 1 || 1}: ${route.cityName} ‚Äî ${route.theme}</h2>
          ${route.days
				.map(
					(day, i) => `
              <h3>–î–µ–Ω—å ${i + 1}: ${day.title}</h3>
              <ul>
                ${day.places
							.map(
								(place) => `
                  <li><strong>${place.time}</strong> ‚Äî ${place.name
									} (${getPlaceTypeName(place.type)})<br/>
                  <small>${place.address}</small></li>
                `
							)
							.join('')}
              </ul>
            `
				)
				.join('')}
          <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
          <script>
            window.onload = () => {
              html2pdf().set({
                margin: 10,
                filename: '–ú–∞—Ä—à—Ä—É—Ç-${index + 1 || 1}.pdf',
                image: { type: 'jpeg', quality: 0.98 },
                html2canvas: { scale: 2, useCORS: true },
                jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
              }).from(document.body).save();
            };
          </script>
        </body>
      </html>
    `;

		newWindow.document.write(html);
		newWindow.document.close();
	});
	box.appendChild(pdfButton);

	// üîµ –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
	const shareButton = document.createElement('button');
	shareButton.textContent = '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è';
	shareButton.style.marginLeft = '10px';
	shareButton.addEventListener('click', () => {
		try {
			const encoded = btoa(encodeURIComponent(JSON.stringify(route)));
			const url = `${window.location.origin}/saved-routes.html?data=${encoded}`;
			window.open(url, '_blank');
		} catch (err) {
			alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç');
		}
	});
	box.appendChild(shareButton);

	// üîµ –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç)
	if (index !== undefined) {
		const deleteButton = document.createElement('button');
		deleteButton.textContent = '–£–¥–∞–ª–∏—Ç—å';
		deleteButton.style.marginLeft = '10px';
		deleteButton.addEventListener('click', () => {
			const raw = localStorage.getItem('savedRoutes');
			let routes = raw ? JSON.parse(raw) : [];
			routes.splice(index, 1);
			localStorage.setItem('savedRoutes', JSON.stringify(routes));
			location.reload();
		});
		box.appendChild(deleteButton);
	}

	container.appendChild(box);
}

function getPlaceTypeName(type) {
	const map = {
		attraction: '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
		museum: '–ú—É–∑–µ–π',
		restaurant: '–†–µ—Å—Ç–æ—Ä–∞–Ω',
		cafe: '–ö–∞—Ñ–µ',
		bar: '–ë–∞—Ä',
		hotel: '–û—Ç–µ–ª—å',
		park: '–ü–∞—Ä–∫',
	};
	return map[type] || type;
}
